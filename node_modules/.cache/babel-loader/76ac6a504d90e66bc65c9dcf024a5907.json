{"ast":null,"code":"import * as yup from \"yup\";\nconst phoneRegEx = /^[+]?(\\d{1,2})?[\\s.-]?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\nexport default yup.object().shape({\n  name_first: yup.string().required(\"First name is required\").min(3, \"First name must be 3 chars long\"),\n  name_last: yup.string().required(\"Last name is required\").min(3, \"Last name must be 3 chars long\"),\n  email: yup.string().email(\"must be a valid email\").required(\"email is required\"),\n  street_address: yup.string().required(\"Street address is required\"),\n  city: yup.string().required(\"City is required\").min(3, \"City must be 3 char long\"),\n  state: yup.string().required(\"State is required\").min(2, \"State must be 2 char\").max(2, \"State must be 2 char\"),\n  zip_code: yup.string().required(\"Zip code is required\").min(5, \"Zip code must be 5 char\").max(11, \"Zip code must be less than 11 char\"),\n  phone_number: yup.string().matches(phoneRegEx, \"Must be a valid phone number\").required(\"Phone number is required\")\n});","map":{"version":3,"sources":["/Users/onaje/Desktop/Lucky-Penny/src/validation/orderFormSchema.js"],"names":["yup","phoneRegEx","object","shape","name_first","string","required","min","name_last","email","street_address","city","state","max","zip_code","phone_number","matches"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,MAAMC,UAAU,GAAG,4DAAnB;AAEA,eAAeD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AAChCC,EAAAA,UAAU,EAAEJ,GAAG,CACZK,MADS,GAETC,QAFS,CAEA,wBAFA,EAGTC,GAHS,CAGL,CAHK,EAGF,iCAHE,CADoB;AAKhCC,EAAAA,SAAS,EAAER,GAAG,CACXK,MADQ,GAERC,QAFQ,CAEC,uBAFD,EAGRC,GAHQ,CAGJ,CAHI,EAGD,gCAHC,CALqB;AAShCE,EAAAA,KAAK,EAAET,GAAG,CACPK,MADI,GAEJI,KAFI,CAEE,uBAFF,EAGJH,QAHI,CAGK,mBAHL,CATyB;AAahCI,EAAAA,cAAc,EAAEV,GAAG,CAACK,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB,CAbgB;AAchCK,EAAAA,IAAI,EAAEX,GAAG,CACNK,MADG,GAEHC,QAFG,CAEM,kBAFN,EAGHC,GAHG,CAGC,CAHD,EAGI,0BAHJ,CAd0B;AAkBhCK,EAAAA,KAAK,EAAEZ,GAAG,CACPK,MADI,GAEJC,QAFI,CAEK,mBAFL,EAGJC,GAHI,CAGA,CAHA,EAGG,sBAHH,EAIJM,GAJI,CAIA,CAJA,EAIG,sBAJH,CAlByB;AAuBhCC,EAAAA,QAAQ,EAAEd,GAAG,CACVK,MADO,GAEPC,QAFO,CAEE,sBAFF,EAGPC,GAHO,CAGH,CAHG,EAGA,yBAHA,EAIPM,GAJO,CAIH,EAJG,EAIC,oCAJD,CAvBsB;AA4BhCE,EAAAA,YAAY,EAAEf,GAAG,CACdK,MADW,GAEXW,OAFW,CAEHf,UAFG,EAES,8BAFT,EAGXK,QAHW,CAGF,0BAHE;AA5BkB,CAAnB,CAAf","sourcesContent":["import * as yup from \"yup\";\n\nconst phoneRegEx = /^[+]?(\\d{1,2})?[\\s.-]?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n\nexport default yup.object().shape({\n  name_first: yup\n    .string()\n    .required(\"First name is required\")\n    .min(3, \"First name must be 3 chars long\"),\n  name_last: yup\n    .string()\n    .required(\"Last name is required\")\n    .min(3, \"Last name must be 3 chars long\"),\n  email: yup\n    .string()\n    .email(\"must be a valid email\")\n    .required(\"email is required\"),\n  street_address: yup.string().required(\"Street address is required\"),\n  city: yup\n    .string()\n    .required(\"City is required\")\n    .min(3, \"City must be 3 char long\"),\n  state: yup\n    .string()\n    .required(\"State is required\")\n    .min(2, \"State must be 2 char\")\n    .max(2, \"State must be 2 char\"),\n  zip_code: yup\n    .string()\n    .required(\"Zip code is required\")\n    .min(5, \"Zip code must be 5 char\")\n    .max(11, \"Zip code must be less than 11 char\"),\n  phone_number: yup\n    .string()\n    .matches(phoneRegEx, \"Must be a valid phone number\")\n    .required(\"Phone number is required\"),\n});\n"]},"metadata":{},"sourceType":"module"}